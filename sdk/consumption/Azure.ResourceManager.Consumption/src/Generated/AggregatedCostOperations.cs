// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Threading;
using System.Threading.Tasks;
using Azure;
using Azure.Core.Pipeline;
using Azure.ResourceManager.Consumption.Models;

namespace Azure.ResourceManager.Consumption
{
    /// <summary> The AggregatedCost service client. </summary>
    public partial class AggregatedCostOperations
    {
        private readonly ClientDiagnostics _clientDiagnostics;
        private readonly HttpPipeline _pipeline;
        internal AggregatedCostRestOperations RestClient { get; }
        /// <summary> Initializes a new instance of AggregatedCostOperations for mocking. </summary>
        protected AggregatedCostOperations()
        {
        }
        /// <summary> Initializes a new instance of AggregatedCostOperations. </summary>
        /// <param name="clientDiagnostics"> The handler for diagnostic messaging in the client. </param>
        /// <param name="pipeline"> The HTTP pipeline for sending and receiving REST requests and responses. </param>
        /// <param name="endpoint"> server parameter. </param>
        /// <param name="apiVersion"> Api Version. </param>
        internal AggregatedCostOperations(ClientDiagnostics clientDiagnostics, HttpPipeline pipeline, Uri endpoint = null, string apiVersion = "2019-10-01")
        {
            RestClient = new AggregatedCostRestOperations(clientDiagnostics, pipeline, endpoint, apiVersion);
            _clientDiagnostics = clientDiagnostics;
            _pipeline = pipeline;
        }

        /// <summary> Provides the aggregate cost of a management group and all child management groups by current billing period. </summary>
        /// <param name="managementGroupId"> Azure Management Group ID. </param>
        /// <param name="filter"> May be used to filter aggregated cost by properties/usageStart (Utc time), properties/usageEnd (Utc time). The filter supports &apos;eq&apos;, &apos;lt&apos;, &apos;gt&apos;, &apos;le&apos;, &apos;ge&apos;, and &apos;and&apos;. It does not currently support &apos;ne&apos;, &apos;or&apos;, or &apos;not&apos;. Tag filter is a key value pair string where key and value is separated by a colon (:). </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response<ManagementGroupAggregatedCostResult>> GetByManagementGroupAsync(string managementGroupId, string filter = null, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("AggregatedCostOperations.GetByManagementGroup");
            scope.Start();
            try
            {
                return await RestClient.GetByManagementGroupAsync(managementGroupId, filter, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Provides the aggregate cost of a management group and all child management groups by current billing period. </summary>
        /// <param name="managementGroupId"> Azure Management Group ID. </param>
        /// <param name="filter"> May be used to filter aggregated cost by properties/usageStart (Utc time), properties/usageEnd (Utc time). The filter supports &apos;eq&apos;, &apos;lt&apos;, &apos;gt&apos;, &apos;le&apos;, &apos;ge&apos;, and &apos;and&apos;. It does not currently support &apos;ne&apos;, &apos;or&apos;, or &apos;not&apos;. Tag filter is a key value pair string where key and value is separated by a colon (:). </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<ManagementGroupAggregatedCostResult> GetByManagementGroup(string managementGroupId, string filter = null, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("AggregatedCostOperations.GetByManagementGroup");
            scope.Start();
            try
            {
                return RestClient.GetByManagementGroup(managementGroupId, filter, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Provides the aggregate cost of a management group and all child management groups by specified billing period. </summary>
        /// <param name="managementGroupId"> Azure Management Group ID. </param>
        /// <param name="billingPeriodName"> Billing Period Name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response<ManagementGroupAggregatedCostResult>> GetForBillingPeriodByManagementGroupAsync(string managementGroupId, string billingPeriodName, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("AggregatedCostOperations.GetForBillingPeriodByManagementGroup");
            scope.Start();
            try
            {
                return await RestClient.GetForBillingPeriodByManagementGroupAsync(managementGroupId, billingPeriodName, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Provides the aggregate cost of a management group and all child management groups by specified billing period. </summary>
        /// <param name="managementGroupId"> Azure Management Group ID. </param>
        /// <param name="billingPeriodName"> Billing Period Name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<ManagementGroupAggregatedCostResult> GetForBillingPeriodByManagementGroup(string managementGroupId, string billingPeriodName, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("AggregatedCostOperations.GetForBillingPeriodByManagementGroup");
            scope.Start();
            try
            {
                return RestClient.GetForBillingPeriodByManagementGroup(managementGroupId, billingPeriodName, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }
    }
}
