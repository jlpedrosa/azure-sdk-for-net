// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.Consumption.Models
{
    public partial class ReservationRecommendationDetailsModel
    {
        internal static ReservationRecommendationDetailsModel DeserializeReservationRecommendationDetailsModel(JsonElement element)
        {
            Optional<string> id = default;
            Optional<string> name = default;
            Optional<string> type = default;
            Optional<IReadOnlyDictionary<string, string>> tags = default;
            Optional<string> currency = default;
            Optional<ReservationRecommendationDetailsResourceProperties> resource = default;
            Optional<string> resourceGroup = default;
            Optional<ReservationRecommendationDetailsSavingsProperties> savings = default;
            Optional<string> scope = default;
            Optional<ReservationRecommendationDetailsUsageProperties> usage = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("id"))
                {
                    id = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("name"))
                {
                    name = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("type"))
                {
                    type = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("tags"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    Dictionary<string, string> dictionary = new Dictionary<string, string>();
                    foreach (var property0 in property.Value.EnumerateObject())
                    {
                        dictionary.Add(property0.Name, property0.Value.GetString());
                    }
                    tags = dictionary;
                    continue;
                }
                if (property.NameEquals("properties"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    foreach (var property0 in property.Value.EnumerateObject())
                    {
                        if (property0.NameEquals("currency"))
                        {
                            currency = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("resource"))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                property0.ThrowNonNullablePropertyIsNull();
                                continue;
                            }
                            resource = ReservationRecommendationDetailsResourceProperties.DeserializeReservationRecommendationDetailsResourceProperties(property0.Value);
                            continue;
                        }
                        if (property0.NameEquals("resourceGroup"))
                        {
                            resourceGroup = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("savings"))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                property0.ThrowNonNullablePropertyIsNull();
                                continue;
                            }
                            savings = ReservationRecommendationDetailsSavingsProperties.DeserializeReservationRecommendationDetailsSavingsProperties(property0.Value);
                            continue;
                        }
                        if (property0.NameEquals("scope"))
                        {
                            scope = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("usage"))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                property0.ThrowNonNullablePropertyIsNull();
                                continue;
                            }
                            usage = ReservationRecommendationDetailsUsageProperties.DeserializeReservationRecommendationDetailsUsageProperties(property0.Value);
                            continue;
                        }
                    }
                    continue;
                }
            }
            return new ReservationRecommendationDetailsModel(id.Value, name.Value, type.Value, Optional.ToDictionary(tags), currency.Value, resource.Value, resourceGroup.Value, savings.Value, scope.Value, usage.Value);
        }
    }
}
