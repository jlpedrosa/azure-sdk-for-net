// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.Consumption.Models
{
    public partial class ModernUsageDetail
    {
        internal static ModernUsageDetail DeserializeModernUsageDetail(JsonElement element)
        {
            UsageDetailsKind kind = default;
            Optional<string> id = default;
            Optional<string> name = default;
            Optional<string> type = default;
            Optional<IReadOnlyDictionary<string, string>> tags = default;
            Optional<string> billingAccountId = default;
            Optional<string> billingAccountName = default;
            Optional<DateTimeOffset> billingPeriodStartDate = default;
            Optional<DateTimeOffset> billingPeriodEndDate = default;
            Optional<string> billingProfileId = default;
            Optional<string> billingProfileName = default;
            Optional<string> subscriptionGuid = default;
            Optional<string> subscriptionName = default;
            Optional<DateTimeOffset> date = default;
            Optional<string> product = default;
            Optional<Guid> meterId = default;
            Optional<string> meterName = default;
            Optional<string> meterRegion = default;
            Optional<string> meterCategory = default;
            Optional<string> meterSubCategory = default;
            Optional<string> serviceFamily = default;
            Optional<decimal> quantity = default;
            Optional<string> unitOfMeasure = default;
            Optional<string> instanceName = default;
            Optional<decimal> costInUSD = default;
            Optional<decimal> unitPrice = default;
            Optional<string> billingCurrencyCode = default;
            Optional<string> resourceLocation = default;
            Optional<string> consumedService = default;
            Optional<string> serviceInfo1 = default;
            Optional<string> serviceInfo2 = default;
            Optional<string> additionalInfo = default;
            Optional<string> invoiceSectionId = default;
            Optional<string> invoiceSectionName = default;
            Optional<string> costCenter = default;
            Optional<string> resourceGroup = default;
            Optional<string> reservationId = default;
            Optional<string> reservationName = default;
            Optional<string> productOrderId = default;
            Optional<string> productOrderName = default;
            Optional<bool> isAzureCreditEligible = default;
            Optional<string> term = default;
            Optional<string> publisherName = default;
            Optional<string> publisherType = default;
            Optional<string> chargeType = default;
            Optional<string> frequency = default;
            Optional<decimal> costInBillingCurrency = default;
            Optional<decimal> costInPricingCurrency = default;
            Optional<string> exchangeRate = default;
            Optional<DateTimeOffset> exchangeRateDate = default;
            Optional<string> invoiceId = default;
            Optional<string> previousInvoiceId = default;
            Optional<string> pricingCurrencyCode = default;
            Optional<string> productIdentifier = default;
            Optional<string> resourceLocationNormalized = default;
            Optional<DateTimeOffset> servicePeriodStartDate = default;
            Optional<DateTimeOffset> servicePeriodEndDate = default;
            Optional<string> customerTenantId = default;
            Optional<string> customerName = default;
            Optional<string> partnerTenantId = default;
            Optional<string> partnerName = default;
            Optional<string> resellerMpnId = default;
            Optional<string> resellerName = default;
            Optional<string> publisherId = default;
            Optional<decimal> marketPrice = default;
            Optional<decimal> exchangeRatePricingToBilling = default;
            Optional<decimal> paygCostInBillingCurrency = default;
            Optional<decimal> paygCostInUSD = default;
            Optional<decimal> partnerEarnedCreditRate = default;
            Optional<string> partnerEarnedCreditApplied = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("kind"))
                {
                    kind = new UsageDetailsKind(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("id"))
                {
                    id = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("name"))
                {
                    name = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("type"))
                {
                    type = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("tags"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    Dictionary<string, string> dictionary = new Dictionary<string, string>();
                    foreach (var property0 in property.Value.EnumerateObject())
                    {
                        dictionary.Add(property0.Name, property0.Value.GetString());
                    }
                    tags = dictionary;
                    continue;
                }
                if (property.NameEquals("properties"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    foreach (var property0 in property.Value.EnumerateObject())
                    {
                        if (property0.NameEquals("billingAccountId"))
                        {
                            billingAccountId = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("billingAccountName"))
                        {
                            billingAccountName = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("billingPeriodStartDate"))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                property0.ThrowNonNullablePropertyIsNull();
                                continue;
                            }
                            billingPeriodStartDate = property0.Value.GetDateTimeOffset("O");
                            continue;
                        }
                        if (property0.NameEquals("billingPeriodEndDate"))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                property0.ThrowNonNullablePropertyIsNull();
                                continue;
                            }
                            billingPeriodEndDate = property0.Value.GetDateTimeOffset("O");
                            continue;
                        }
                        if (property0.NameEquals("billingProfileId"))
                        {
                            billingProfileId = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("billingProfileName"))
                        {
                            billingProfileName = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("subscriptionGuid"))
                        {
                            subscriptionGuid = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("subscriptionName"))
                        {
                            subscriptionName = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("date"))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                property0.ThrowNonNullablePropertyIsNull();
                                continue;
                            }
                            date = property0.Value.GetDateTimeOffset("O");
                            continue;
                        }
                        if (property0.NameEquals("product"))
                        {
                            product = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("meterId"))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                property0.ThrowNonNullablePropertyIsNull();
                                continue;
                            }
                            meterId = property0.Value.GetGuid();
                            continue;
                        }
                        if (property0.NameEquals("meterName"))
                        {
                            meterName = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("meterRegion"))
                        {
                            meterRegion = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("meterCategory"))
                        {
                            meterCategory = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("meterSubCategory"))
                        {
                            meterSubCategory = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("serviceFamily"))
                        {
                            serviceFamily = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("quantity"))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                property0.ThrowNonNullablePropertyIsNull();
                                continue;
                            }
                            quantity = property0.Value.GetDecimal();
                            continue;
                        }
                        if (property0.NameEquals("unitOfMeasure"))
                        {
                            unitOfMeasure = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("instanceName"))
                        {
                            instanceName = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("costInUSD"))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                property0.ThrowNonNullablePropertyIsNull();
                                continue;
                            }
                            costInUSD = property0.Value.GetDecimal();
                            continue;
                        }
                        if (property0.NameEquals("unitPrice"))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                property0.ThrowNonNullablePropertyIsNull();
                                continue;
                            }
                            unitPrice = property0.Value.GetDecimal();
                            continue;
                        }
                        if (property0.NameEquals("billingCurrencyCode"))
                        {
                            billingCurrencyCode = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("resourceLocation"))
                        {
                            resourceLocation = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("consumedService"))
                        {
                            consumedService = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("serviceInfo1"))
                        {
                            serviceInfo1 = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("serviceInfo2"))
                        {
                            serviceInfo2 = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("additionalInfo"))
                        {
                            additionalInfo = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("invoiceSectionId"))
                        {
                            invoiceSectionId = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("invoiceSectionName"))
                        {
                            invoiceSectionName = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("costCenter"))
                        {
                            costCenter = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("resourceGroup"))
                        {
                            resourceGroup = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("reservationId"))
                        {
                            reservationId = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("reservationName"))
                        {
                            reservationName = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("productOrderId"))
                        {
                            productOrderId = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("productOrderName"))
                        {
                            productOrderName = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("isAzureCreditEligible"))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                property0.ThrowNonNullablePropertyIsNull();
                                continue;
                            }
                            isAzureCreditEligible = property0.Value.GetBoolean();
                            continue;
                        }
                        if (property0.NameEquals("term"))
                        {
                            term = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("publisherName"))
                        {
                            publisherName = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("publisherType"))
                        {
                            publisherType = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("chargeType"))
                        {
                            chargeType = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("frequency"))
                        {
                            frequency = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("costInBillingCurrency"))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                property0.ThrowNonNullablePropertyIsNull();
                                continue;
                            }
                            costInBillingCurrency = property0.Value.GetDecimal();
                            continue;
                        }
                        if (property0.NameEquals("costInPricingCurrency"))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                property0.ThrowNonNullablePropertyIsNull();
                                continue;
                            }
                            costInPricingCurrency = property0.Value.GetDecimal();
                            continue;
                        }
                        if (property0.NameEquals("exchangeRate"))
                        {
                            exchangeRate = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("exchangeRateDate"))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                property0.ThrowNonNullablePropertyIsNull();
                                continue;
                            }
                            exchangeRateDate = property0.Value.GetDateTimeOffset("O");
                            continue;
                        }
                        if (property0.NameEquals("invoiceId"))
                        {
                            invoiceId = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("previousInvoiceId"))
                        {
                            previousInvoiceId = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("pricingCurrencyCode"))
                        {
                            pricingCurrencyCode = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("productIdentifier"))
                        {
                            productIdentifier = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("resourceLocationNormalized"))
                        {
                            resourceLocationNormalized = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("servicePeriodStartDate"))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                property0.ThrowNonNullablePropertyIsNull();
                                continue;
                            }
                            servicePeriodStartDate = property0.Value.GetDateTimeOffset("O");
                            continue;
                        }
                        if (property0.NameEquals("servicePeriodEndDate"))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                property0.ThrowNonNullablePropertyIsNull();
                                continue;
                            }
                            servicePeriodEndDate = property0.Value.GetDateTimeOffset("O");
                            continue;
                        }
                        if (property0.NameEquals("customerTenantId"))
                        {
                            customerTenantId = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("customerName"))
                        {
                            customerName = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("partnerTenantId"))
                        {
                            partnerTenantId = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("partnerName"))
                        {
                            partnerName = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("resellerMpnId"))
                        {
                            resellerMpnId = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("resellerName"))
                        {
                            resellerName = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("publisherId"))
                        {
                            publisherId = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("marketPrice"))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                property0.ThrowNonNullablePropertyIsNull();
                                continue;
                            }
                            marketPrice = property0.Value.GetDecimal();
                            continue;
                        }
                        if (property0.NameEquals("exchangeRatePricingToBilling"))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                property0.ThrowNonNullablePropertyIsNull();
                                continue;
                            }
                            exchangeRatePricingToBilling = property0.Value.GetDecimal();
                            continue;
                        }
                        if (property0.NameEquals("paygCostInBillingCurrency"))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                property0.ThrowNonNullablePropertyIsNull();
                                continue;
                            }
                            paygCostInBillingCurrency = property0.Value.GetDecimal();
                            continue;
                        }
                        if (property0.NameEquals("paygCostInUSD"))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                property0.ThrowNonNullablePropertyIsNull();
                                continue;
                            }
                            paygCostInUSD = property0.Value.GetDecimal();
                            continue;
                        }
                        if (property0.NameEquals("partnerEarnedCreditRate"))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                property0.ThrowNonNullablePropertyIsNull();
                                continue;
                            }
                            partnerEarnedCreditRate = property0.Value.GetDecimal();
                            continue;
                        }
                        if (property0.NameEquals("partnerEarnedCreditApplied"))
                        {
                            partnerEarnedCreditApplied = property0.Value.GetString();
                            continue;
                        }
                    }
                    continue;
                }
            }
            return new ModernUsageDetail(id.Value, name.Value, type.Value, Optional.ToDictionary(tags), kind, billingAccountId.Value, billingAccountName.Value, Optional.ToNullable(billingPeriodStartDate), Optional.ToNullable(billingPeriodEndDate), billingProfileId.Value, billingProfileName.Value, subscriptionGuid.Value, subscriptionName.Value, Optional.ToNullable(date), product.Value, Optional.ToNullable(meterId), meterName.Value, meterRegion.Value, meterCategory.Value, meterSubCategory.Value, serviceFamily.Value, Optional.ToNullable(quantity), unitOfMeasure.Value, instanceName.Value, Optional.ToNullable(costInUSD), Optional.ToNullable(unitPrice), billingCurrencyCode.Value, resourceLocation.Value, consumedService.Value, serviceInfo1.Value, serviceInfo2.Value, additionalInfo.Value, invoiceSectionId.Value, invoiceSectionName.Value, costCenter.Value, resourceGroup.Value, reservationId.Value, reservationName.Value, productOrderId.Value, productOrderName.Value, Optional.ToNullable(isAzureCreditEligible), term.Value, publisherName.Value, publisherType.Value, chargeType.Value, frequency.Value, Optional.ToNullable(costInBillingCurrency), Optional.ToNullable(costInPricingCurrency), exchangeRate.Value, Optional.ToNullable(exchangeRateDate), invoiceId.Value, previousInvoiceId.Value, pricingCurrencyCode.Value, productIdentifier.Value, resourceLocationNormalized.Value, Optional.ToNullable(servicePeriodStartDate), Optional.ToNullable(servicePeriodEndDate), customerTenantId.Value, customerName.Value, partnerTenantId.Value, partnerName.Value, resellerMpnId.Value, resellerName.Value, publisherId.Value, Optional.ToNullable(marketPrice), Optional.ToNullable(exchangeRatePricingToBilling), Optional.ToNullable(paygCostInBillingCurrency), Optional.ToNullable(paygCostInUSD), Optional.ToNullable(partnerEarnedCreditRate), partnerEarnedCreditApplied.Value);
        }
    }
}
