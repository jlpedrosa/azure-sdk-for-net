// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.Consumption.Models
{
    public partial class ModernReservationRecommendation
    {
        internal static ModernReservationRecommendation DeserializeModernReservationRecommendation(JsonElement element)
        {
            ReservationRecommendationKind kind = default;
            Optional<string> location = default;
            Optional<string> sku = default;
            Optional<string> id = default;
            Optional<string> name = default;
            Optional<string> type = default;
            Optional<IReadOnlyDictionary<string, string>> tags = default;
            Optional<string> lookBackPeriod = default;
            Optional<int> instanceFlexibilityRatio = default;
            Optional<string> instanceFlexibilityGroup = default;
            Optional<string> normalizedSize = default;
            Optional<float> recommendedQuantityNormalized = default;
            Optional<Guid> meterId = default;
            Optional<string> term = default;
            Optional<Amount> costWithNoReservedInstances = default;
            Optional<decimal> recommendedQuantity = default;
            Optional<Amount> totalCostWithReservedInstances = default;
            Optional<Amount> netSavings = default;
            Optional<DateTimeOffset> firstUsageDate = default;
            Optional<string> scope = default;
            Optional<IReadOnlyList<SkuProperty>> skuProperties = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("kind"))
                {
                    kind = new ReservationRecommendationKind(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("location"))
                {
                    location = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("sku"))
                {
                    sku = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("id"))
                {
                    id = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("name"))
                {
                    name = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("type"))
                {
                    type = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("tags"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    Dictionary<string, string> dictionary = new Dictionary<string, string>();
                    foreach (var property0 in property.Value.EnumerateObject())
                    {
                        dictionary.Add(property0.Name, property0.Value.GetString());
                    }
                    tags = dictionary;
                    continue;
                }
                if (property.NameEquals("properties"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    foreach (var property0 in property.Value.EnumerateObject())
                    {
                        if (property0.NameEquals("lookBackPeriod"))
                        {
                            lookBackPeriod = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("instanceFlexibilityRatio"))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                property0.ThrowNonNullablePropertyIsNull();
                                continue;
                            }
                            instanceFlexibilityRatio = property0.Value.GetInt32();
                            continue;
                        }
                        if (property0.NameEquals("instanceFlexibilityGroup"))
                        {
                            instanceFlexibilityGroup = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("normalizedSize"))
                        {
                            normalizedSize = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("recommendedQuantityNormalized"))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                property0.ThrowNonNullablePropertyIsNull();
                                continue;
                            }
                            recommendedQuantityNormalized = property0.Value.GetSingle();
                            continue;
                        }
                        if (property0.NameEquals("meterId"))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                property0.ThrowNonNullablePropertyIsNull();
                                continue;
                            }
                            meterId = property0.Value.GetGuid();
                            continue;
                        }
                        if (property0.NameEquals("term"))
                        {
                            term = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("costWithNoReservedInstances"))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                property0.ThrowNonNullablePropertyIsNull();
                                continue;
                            }
                            costWithNoReservedInstances = Amount.DeserializeAmount(property0.Value);
                            continue;
                        }
                        if (property0.NameEquals("recommendedQuantity"))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                property0.ThrowNonNullablePropertyIsNull();
                                continue;
                            }
                            recommendedQuantity = property0.Value.GetDecimal();
                            continue;
                        }
                        if (property0.NameEquals("totalCostWithReservedInstances"))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                property0.ThrowNonNullablePropertyIsNull();
                                continue;
                            }
                            totalCostWithReservedInstances = Amount.DeserializeAmount(property0.Value);
                            continue;
                        }
                        if (property0.NameEquals("netSavings"))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                property0.ThrowNonNullablePropertyIsNull();
                                continue;
                            }
                            netSavings = Amount.DeserializeAmount(property0.Value);
                            continue;
                        }
                        if (property0.NameEquals("firstUsageDate"))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                property0.ThrowNonNullablePropertyIsNull();
                                continue;
                            }
                            firstUsageDate = property0.Value.GetDateTimeOffset("O");
                            continue;
                        }
                        if (property0.NameEquals("scope"))
                        {
                            scope = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("skuProperties"))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                property0.ThrowNonNullablePropertyIsNull();
                                continue;
                            }
                            List<SkuProperty> array = new List<SkuProperty>();
                            foreach (var item in property0.Value.EnumerateArray())
                            {
                                array.Add(SkuProperty.DeserializeSkuProperty(item));
                            }
                            skuProperties = array;
                            continue;
                        }
                    }
                    continue;
                }
            }
            return new ModernReservationRecommendation(id.Value, name.Value, type.Value, Optional.ToDictionary(tags), kind, location.Value, sku.Value, lookBackPeriod.Value, Optional.ToNullable(instanceFlexibilityRatio), instanceFlexibilityGroup.Value, normalizedSize.Value, Optional.ToNullable(recommendedQuantityNormalized), Optional.ToNullable(meterId), term.Value, costWithNoReservedInstances.Value, Optional.ToNullable(recommendedQuantity), totalCostWithReservedInstances.Value, netSavings.Value, Optional.ToNullable(firstUsageDate), scope.Value, Optional.ToList(skuProperties));
        }
    }
}
