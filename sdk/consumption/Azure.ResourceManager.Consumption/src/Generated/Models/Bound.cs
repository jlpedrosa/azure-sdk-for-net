// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.ResourceManager.Consumption.Models
{
    /// <summary> The boundary of the percentage, values could be &apos;Upper&apos; or &apos;Lower&apos;. </summary>
    public readonly partial struct Bound : IEquatable<Bound>
    {
        private readonly string _value;

        /// <summary> Determines if two <see cref="Bound"/> values are the same. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public Bound(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string UpperValue = "Upper";
        private const string LowerValue = "Lower";

        /// <summary> Upper. </summary>
        public static Bound Upper { get; } = new Bound(UpperValue);
        /// <summary> Lower. </summary>
        public static Bound Lower { get; } = new Bound(LowerValue);
        /// <summary> Determines if two <see cref="Bound"/> values are the same. </summary>
        public static bool operator ==(Bound left, Bound right) => left.Equals(right);
        /// <summary> Determines if two <see cref="Bound"/> values are not the same. </summary>
        public static bool operator !=(Bound left, Bound right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="Bound"/>. </summary>
        public static implicit operator Bound(string value) => new Bound(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is Bound other && Equals(other);
        /// <inheritdoc />
        public bool Equals(Bound other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
