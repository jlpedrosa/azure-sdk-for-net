// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Threading;
using System.Threading.Tasks;
using Azure;
using Azure.Core.Pipeline;
using Azure.ResourceManager.Consumption.Models;

namespace Azure.ResourceManager.Consumption
{
    /// <summary> The Charges service client. </summary>
    public partial class ChargesOperations
    {
        private readonly ClientDiagnostics _clientDiagnostics;
        private readonly HttpPipeline _pipeline;
        internal ChargesRestOperations RestClient { get; }
        /// <summary> Initializes a new instance of ChargesOperations for mocking. </summary>
        protected ChargesOperations()
        {
        }
        /// <summary> Initializes a new instance of ChargesOperations. </summary>
        /// <param name="clientDiagnostics"> The handler for diagnostic messaging in the client. </param>
        /// <param name="pipeline"> The HTTP pipeline for sending and receiving REST requests and responses. </param>
        /// <param name="endpoint"> server parameter. </param>
        /// <param name="apiVersion"> Api Version. </param>
        internal ChargesOperations(ClientDiagnostics clientDiagnostics, HttpPipeline pipeline, Uri endpoint = null, string apiVersion = "2019-10-01")
        {
            RestClient = new ChargesRestOperations(clientDiagnostics, pipeline, endpoint, apiVersion);
            _clientDiagnostics = clientDiagnostics;
            _pipeline = pipeline;
        }

        /// <summary> Lists the charges based for the defined scope. </summary>
        /// <param name="scope"> The scope associated with charges operations. This includes &apos;/providers/Microsoft.Billing/billingAccounts/{billingAccountId}/departments/{departmentId}&apos; for Department scope, and &apos;/providers/Microsoft.Billing/billingAccounts/{billingAccountId}/enrollmentAccounts/{enrollmentAccountId}&apos; for EnrollmentAccount scope. For department and enrollment accounts, you can also add billing period to the scope using &apos;/providers/Microsoft.Billing/billingPeriods/{billingPeriodName}&apos;. For e.g. to specify billing period at department scope use &apos;/providers/Microsoft.Billing/billingAccounts/{billingAccountId}/departments/{departmentId}/providers/Microsoft.Billing/billingPeriods/{billingPeriodName}&apos;. Also, Modern Commerce Account scopes are &apos;/providers/Microsoft.Billing/billingAccounts/{billingAccountId}&apos; for billingAccount scope, &apos;/providers/Microsoft.Billing/billingAccounts/{billingAccountId}/billingProfiles/{billingProfileId}&apos; for billingProfile scope, &apos;providers/Microsoft.Billing/billingAccounts/{billingAccountId}/billingProfiles/{billingProfileId}/invoiceSections/{invoiceSectionId}&apos; for invoiceSection scope, and &apos;providers/Microsoft.Billing/billingAccounts/{billingAccountId}/customers/{customerId}&apos; specific for partners. </param>
        /// <param name="startDate"> Start date. </param>
        /// <param name="endDate"> End date. </param>
        /// <param name="filter"> May be used to filter charges by properties/usageEnd (Utc time), properties/usageStart (Utc time). The filter supports &apos;eq&apos;, &apos;lt&apos;, &apos;gt&apos;, &apos;le&apos;, &apos;ge&apos;, and &apos;and&apos;. It does not currently support &apos;ne&apos;, &apos;or&apos;, or &apos;not&apos;. Tag filter is a key value pair string where key and value is separated by a colon (:). </param>
        /// <param name="apply"> May be used to group charges for billingAccount scope by properties/billingProfileId, properties/invoiceSectionId, properties/customerId (specific for Partner Led), or for billingProfile scope by properties/invoiceSectionId. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response<ChargesListResult>> ListAsync(string scope, string startDate = null, string endDate = null, string filter = null, string apply = null, CancellationToken cancellationToken = default)
        {
            using var scope0 = _clientDiagnostics.CreateScope("ChargesOperations.List");
            scope0.Start();
            try
            {
                return await RestClient.ListAsync(scope, startDate, endDate, filter, apply, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope0.Failed(e);
                throw;
            }
        }

        /// <summary> Lists the charges based for the defined scope. </summary>
        /// <param name="scope"> The scope associated with charges operations. This includes &apos;/providers/Microsoft.Billing/billingAccounts/{billingAccountId}/departments/{departmentId}&apos; for Department scope, and &apos;/providers/Microsoft.Billing/billingAccounts/{billingAccountId}/enrollmentAccounts/{enrollmentAccountId}&apos; for EnrollmentAccount scope. For department and enrollment accounts, you can also add billing period to the scope using &apos;/providers/Microsoft.Billing/billingPeriods/{billingPeriodName}&apos;. For e.g. to specify billing period at department scope use &apos;/providers/Microsoft.Billing/billingAccounts/{billingAccountId}/departments/{departmentId}/providers/Microsoft.Billing/billingPeriods/{billingPeriodName}&apos;. Also, Modern Commerce Account scopes are &apos;/providers/Microsoft.Billing/billingAccounts/{billingAccountId}&apos; for billingAccount scope, &apos;/providers/Microsoft.Billing/billingAccounts/{billingAccountId}/billingProfiles/{billingProfileId}&apos; for billingProfile scope, &apos;providers/Microsoft.Billing/billingAccounts/{billingAccountId}/billingProfiles/{billingProfileId}/invoiceSections/{invoiceSectionId}&apos; for invoiceSection scope, and &apos;providers/Microsoft.Billing/billingAccounts/{billingAccountId}/customers/{customerId}&apos; specific for partners. </param>
        /// <param name="startDate"> Start date. </param>
        /// <param name="endDate"> End date. </param>
        /// <param name="filter"> May be used to filter charges by properties/usageEnd (Utc time), properties/usageStart (Utc time). The filter supports &apos;eq&apos;, &apos;lt&apos;, &apos;gt&apos;, &apos;le&apos;, &apos;ge&apos;, and &apos;and&apos;. It does not currently support &apos;ne&apos;, &apos;or&apos;, or &apos;not&apos;. Tag filter is a key value pair string where key and value is separated by a colon (:). </param>
        /// <param name="apply"> May be used to group charges for billingAccount scope by properties/billingProfileId, properties/invoiceSectionId, properties/customerId (specific for Partner Led), or for billingProfile scope by properties/invoiceSectionId. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<ChargesListResult> List(string scope, string startDate = null, string endDate = null, string filter = null, string apply = null, CancellationToken cancellationToken = default)
        {
            using var scope0 = _clientDiagnostics.CreateScope("ChargesOperations.List");
            scope0.Start();
            try
            {
                return RestClient.List(scope, startDate, endDate, filter, apply, cancellationToken);
            }
            catch (Exception e)
            {
                scope0.Failed(e);
                throw;
            }
        }
    }
}
