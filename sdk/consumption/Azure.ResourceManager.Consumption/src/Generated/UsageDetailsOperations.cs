// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Threading;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Core.Pipeline;
using Azure.ResourceManager.Consumption.Models;

namespace Azure.ResourceManager.Consumption
{
    /// <summary> The UsageDetails service client. </summary>
    public partial class UsageDetailsOperations
    {
        private readonly ClientDiagnostics _clientDiagnostics;
        private readonly HttpPipeline _pipeline;
        internal UsageDetailsRestOperations RestClient { get; }
        /// <summary> Initializes a new instance of UsageDetailsOperations for mocking. </summary>
        protected UsageDetailsOperations()
        {
        }
        /// <summary> Initializes a new instance of UsageDetailsOperations. </summary>
        /// <param name="clientDiagnostics"> The handler for diagnostic messaging in the client. </param>
        /// <param name="pipeline"> The HTTP pipeline for sending and receiving REST requests and responses. </param>
        /// <param name="endpoint"> server parameter. </param>
        /// <param name="apiVersion"> Api Version. </param>
        internal UsageDetailsOperations(ClientDiagnostics clientDiagnostics, HttpPipeline pipeline, Uri endpoint = null, string apiVersion = "2019-10-01")
        {
            RestClient = new UsageDetailsRestOperations(clientDiagnostics, pipeline, endpoint, apiVersion);
            _clientDiagnostics = clientDiagnostics;
            _pipeline = pipeline;
        }

        /// <summary> Lists the usage details for the defined scope. Usage details are available via this API only for May 1, 2014 or later. </summary>
        /// <param name="scope"> The scope associated with usage details operations. This includes &apos;/subscriptions/{subscriptionId}/&apos; for subscription scope, &apos;/providers/Microsoft.Billing/billingAccounts/{billingAccountId}&apos; for Billing Account scope, &apos;/providers/Microsoft.Billing/departments/{departmentId}&apos; for Department scope, &apos;/providers/Microsoft.Billing/enrollmentAccounts/{enrollmentAccountId}&apos; for EnrollmentAccount scope and &apos;/providers/Microsoft.Management/managementGroups/{managementGroupId}&apos; for Management Group scope. For subscription, billing account, department, enrollment account and management group, you can also add billing period to the scope using &apos;/providers/Microsoft.Billing/billingPeriods/{billingPeriodName}&apos;. For e.g. to specify billing period at department scope use &apos;/providers/Microsoft.Billing/departments/{departmentId}/providers/Microsoft.Billing/billingPeriods/{billingPeriodName}&apos;. Also, Modern Commerce Account scopes are &apos;/providers/Microsoft.Billing/billingAccounts/{billingAccountId}&apos; for billingAccount scope, &apos;/providers/Microsoft.Billing/billingAccounts/{billingAccountId}/billingProfiles/{billingProfileId}&apos; for billingProfile scope, &apos;providers/Microsoft.Billing/billingAccounts/{billingAccountId}/billingProfiles/{billingProfileId}/invoiceSections/{invoiceSectionId}&apos; for invoiceSection scope, and &apos;providers/Microsoft.Billing/billingAccounts/{billingAccountId}/customers/{customerId}&apos; specific for partners. </param>
        /// <param name="expand"> May be used to expand the properties/additionalInfo or properties/meterDetails within a list of usage details. By default, these fields are not included when listing usage details. </param>
        /// <param name="filter"> May be used to filter usageDetails by properties/resourceGroup, properties/resourceName, properties/resourceId, properties/chargeType, properties/reservationId, properties/publisherType or tags. The filter supports &apos;eq&apos;, &apos;lt&apos;, &apos;gt&apos;, &apos;le&apos;, &apos;ge&apos;, and &apos;and&apos;. It does not currently support &apos;ne&apos;, &apos;or&apos;, or &apos;not&apos;. Tag filter is a key value pair string where key and value is separated by a colon (:). PublisherType Filter accepts two values azure and marketplace and it is currently supported for Web Direct Offer Type. </param>
        /// <param name="skiptoken"> Skiptoken is only used if a previous operation returned a partial result. If a previous response contains a nextLink element, the value of the nextLink element will include a skiptoken parameter that specifies a starting point to use for subsequent calls. </param>
        /// <param name="top"> May be used to limit the number of results to the most recent N usageDetails. </param>
        /// <param name="metric"> Allows to select different type of cost/usage records. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="scope"/> is null. </exception>
        public virtual AsyncPageable<UsageDetail> ListAsync(string scope, string expand = null, string filter = null, string skiptoken = null, int? top = null, Metrictype? metric = null, CancellationToken cancellationToken = default)
        {
            if (scope == null)
            {
                throw new ArgumentNullException(nameof(scope));
            }

            async Task<Page<UsageDetail>> FirstPageFunc(int? pageSizeHint)
            {
                using var scope0 = _clientDiagnostics.CreateScope("UsageDetailsOperations.List");
                scope0.Start();
                try
                {
                    var response = await RestClient.ListAsync(scope, expand, filter, skiptoken, top, metric, cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope0.Failed(e);
                    throw;
                }
            }
            async Task<Page<UsageDetail>> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope0 = _clientDiagnostics.CreateScope("UsageDetailsOperations.List");
                scope0.Start();
                try
                {
                    var response = await RestClient.ListNextPageAsync(nextLink, scope, expand, filter, skiptoken, top, metric, cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope0.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateAsyncEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// <summary> Lists the usage details for the defined scope. Usage details are available via this API only for May 1, 2014 or later. </summary>
        /// <param name="scope"> The scope associated with usage details operations. This includes &apos;/subscriptions/{subscriptionId}/&apos; for subscription scope, &apos;/providers/Microsoft.Billing/billingAccounts/{billingAccountId}&apos; for Billing Account scope, &apos;/providers/Microsoft.Billing/departments/{departmentId}&apos; for Department scope, &apos;/providers/Microsoft.Billing/enrollmentAccounts/{enrollmentAccountId}&apos; for EnrollmentAccount scope and &apos;/providers/Microsoft.Management/managementGroups/{managementGroupId}&apos; for Management Group scope. For subscription, billing account, department, enrollment account and management group, you can also add billing period to the scope using &apos;/providers/Microsoft.Billing/billingPeriods/{billingPeriodName}&apos;. For e.g. to specify billing period at department scope use &apos;/providers/Microsoft.Billing/departments/{departmentId}/providers/Microsoft.Billing/billingPeriods/{billingPeriodName}&apos;. Also, Modern Commerce Account scopes are &apos;/providers/Microsoft.Billing/billingAccounts/{billingAccountId}&apos; for billingAccount scope, &apos;/providers/Microsoft.Billing/billingAccounts/{billingAccountId}/billingProfiles/{billingProfileId}&apos; for billingProfile scope, &apos;providers/Microsoft.Billing/billingAccounts/{billingAccountId}/billingProfiles/{billingProfileId}/invoiceSections/{invoiceSectionId}&apos; for invoiceSection scope, and &apos;providers/Microsoft.Billing/billingAccounts/{billingAccountId}/customers/{customerId}&apos; specific for partners. </param>
        /// <param name="expand"> May be used to expand the properties/additionalInfo or properties/meterDetails within a list of usage details. By default, these fields are not included when listing usage details. </param>
        /// <param name="filter"> May be used to filter usageDetails by properties/resourceGroup, properties/resourceName, properties/resourceId, properties/chargeType, properties/reservationId, properties/publisherType or tags. The filter supports &apos;eq&apos;, &apos;lt&apos;, &apos;gt&apos;, &apos;le&apos;, &apos;ge&apos;, and &apos;and&apos;. It does not currently support &apos;ne&apos;, &apos;or&apos;, or &apos;not&apos;. Tag filter is a key value pair string where key and value is separated by a colon (:). PublisherType Filter accepts two values azure and marketplace and it is currently supported for Web Direct Offer Type. </param>
        /// <param name="skiptoken"> Skiptoken is only used if a previous operation returned a partial result. If a previous response contains a nextLink element, the value of the nextLink element will include a skiptoken parameter that specifies a starting point to use for subsequent calls. </param>
        /// <param name="top"> May be used to limit the number of results to the most recent N usageDetails. </param>
        /// <param name="metric"> Allows to select different type of cost/usage records. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="scope"/> is null. </exception>
        public virtual Pageable<UsageDetail> List(string scope, string expand = null, string filter = null, string skiptoken = null, int? top = null, Metrictype? metric = null, CancellationToken cancellationToken = default)
        {
            if (scope == null)
            {
                throw new ArgumentNullException(nameof(scope));
            }

            Page<UsageDetail> FirstPageFunc(int? pageSizeHint)
            {
                using var scope0 = _clientDiagnostics.CreateScope("UsageDetailsOperations.List");
                scope0.Start();
                try
                {
                    var response = RestClient.List(scope, expand, filter, skiptoken, top, metric, cancellationToken);
                    return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope0.Failed(e);
                    throw;
                }
            }
            Page<UsageDetail> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope0 = _clientDiagnostics.CreateScope("UsageDetailsOperations.List");
                scope0.Start();
                try
                {
                    var response = RestClient.ListNextPage(nextLink, scope, expand, filter, skiptoken, top, metric, cancellationToken);
                    return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope0.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateEnumerable(FirstPageFunc, NextPageFunc);
        }
    }
}
