// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Threading;
using System.Threading.Tasks;
using Azure;
using Azure.Core.Pipeline;
using Azure.ResourceManager.Consumption.Models;

namespace Azure.ResourceManager.Consumption
{
    /// <summary> The Balances service client. </summary>
    public partial class BalancesOperations
    {
        private readonly ClientDiagnostics _clientDiagnostics;
        private readonly HttpPipeline _pipeline;
        internal BalancesRestOperations RestClient { get; }
        /// <summary> Initializes a new instance of BalancesOperations for mocking. </summary>
        protected BalancesOperations()
        {
        }
        /// <summary> Initializes a new instance of BalancesOperations. </summary>
        /// <param name="clientDiagnostics"> The handler for diagnostic messaging in the client. </param>
        /// <param name="pipeline"> The HTTP pipeline for sending and receiving REST requests and responses. </param>
        /// <param name="endpoint"> server parameter. </param>
        /// <param name="apiVersion"> Api Version. </param>
        internal BalancesOperations(ClientDiagnostics clientDiagnostics, HttpPipeline pipeline, Uri endpoint = null, string apiVersion = "2019-10-01")
        {
            RestClient = new BalancesRestOperations(clientDiagnostics, pipeline, endpoint, apiVersion);
            _clientDiagnostics = clientDiagnostics;
            _pipeline = pipeline;
        }

        /// <summary> Gets the balances for a scope by billingAccountId. Balances are available via this API only for May 1, 2014 or later. </summary>
        /// <param name="billingAccountId"> BillingAccount ID. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response<Balance>> GetByBillingAccountAsync(string billingAccountId, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("BalancesOperations.GetByBillingAccount");
            scope.Start();
            try
            {
                return await RestClient.GetByBillingAccountAsync(billingAccountId, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Gets the balances for a scope by billingAccountId. Balances are available via this API only for May 1, 2014 or later. </summary>
        /// <param name="billingAccountId"> BillingAccount ID. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<Balance> GetByBillingAccount(string billingAccountId, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("BalancesOperations.GetByBillingAccount");
            scope.Start();
            try
            {
                return RestClient.GetByBillingAccount(billingAccountId, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Gets the balances for a scope by billing period and billingAccountId. Balances are available via this API only for May 1, 2014 or later. </summary>
        /// <param name="billingAccountId"> BillingAccount ID. </param>
        /// <param name="billingPeriodName"> Billing Period Name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response<Balance>> GetForBillingPeriodByBillingAccountAsync(string billingAccountId, string billingPeriodName, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("BalancesOperations.GetForBillingPeriodByBillingAccount");
            scope.Start();
            try
            {
                return await RestClient.GetForBillingPeriodByBillingAccountAsync(billingAccountId, billingPeriodName, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Gets the balances for a scope by billing period and billingAccountId. Balances are available via this API only for May 1, 2014 or later. </summary>
        /// <param name="billingAccountId"> BillingAccount ID. </param>
        /// <param name="billingPeriodName"> Billing Period Name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<Balance> GetForBillingPeriodByBillingAccount(string billingAccountId, string billingPeriodName, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("BalancesOperations.GetForBillingPeriodByBillingAccount");
            scope.Start();
            try
            {
                return RestClient.GetForBillingPeriodByBillingAccount(billingAccountId, billingPeriodName, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }
    }
}
