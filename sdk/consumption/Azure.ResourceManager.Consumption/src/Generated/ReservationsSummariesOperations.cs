// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Threading;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Core.Pipeline;
using Azure.ResourceManager.Consumption.Models;

namespace Azure.ResourceManager.Consumption
{
    /// <summary> The ReservationsSummaries service client. </summary>
    public partial class ReservationsSummariesOperations
    {
        private readonly ClientDiagnostics _clientDiagnostics;
        private readonly HttpPipeline _pipeline;
        internal ReservationsSummariesRestOperations RestClient { get; }
        /// <summary> Initializes a new instance of ReservationsSummariesOperations for mocking. </summary>
        protected ReservationsSummariesOperations()
        {
        }
        /// <summary> Initializes a new instance of ReservationsSummariesOperations. </summary>
        /// <param name="clientDiagnostics"> The handler for diagnostic messaging in the client. </param>
        /// <param name="pipeline"> The HTTP pipeline for sending and receiving REST requests and responses. </param>
        /// <param name="endpoint"> server parameter. </param>
        /// <param name="apiVersion"> Api Version. </param>
        internal ReservationsSummariesOperations(ClientDiagnostics clientDiagnostics, HttpPipeline pipeline, Uri endpoint = null, string apiVersion = "2019-10-01")
        {
            RestClient = new ReservationsSummariesRestOperations(clientDiagnostics, pipeline, endpoint, apiVersion);
            _clientDiagnostics = clientDiagnostics;
            _pipeline = pipeline;
        }

        /// <summary> Lists the reservations summaries for daily or monthly grain. </summary>
        /// <param name="reservationOrderId"> Order Id of the reservation. </param>
        /// <param name="grain"> Can be daily or monthly. </param>
        /// <param name="filter"> Required only for daily grain. The properties/UsageDate for start date and end date. The filter supports &apos;le&apos; and  &apos;ge&apos;. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="reservationOrderId"/> is null. </exception>
        public virtual AsyncPageable<ReservationSummary> ListByReservationOrderAsync(string reservationOrderId, Datagrain grain, string filter = null, CancellationToken cancellationToken = default)
        {
            if (reservationOrderId == null)
            {
                throw new ArgumentNullException(nameof(reservationOrderId));
            }

            async Task<Page<ReservationSummary>> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("ReservationsSummariesOperations.ListByReservationOrder");
                scope.Start();
                try
                {
                    var response = await RestClient.ListByReservationOrderAsync(reservationOrderId, grain, filter, cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            async Task<Page<ReservationSummary>> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("ReservationsSummariesOperations.ListByReservationOrder");
                scope.Start();
                try
                {
                    var response = await RestClient.ListByReservationOrderNextPageAsync(nextLink, reservationOrderId, grain, filter, cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateAsyncEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// <summary> Lists the reservations summaries for daily or monthly grain. </summary>
        /// <param name="reservationOrderId"> Order Id of the reservation. </param>
        /// <param name="grain"> Can be daily or monthly. </param>
        /// <param name="filter"> Required only for daily grain. The properties/UsageDate for start date and end date. The filter supports &apos;le&apos; and  &apos;ge&apos;. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="reservationOrderId"/> is null. </exception>
        public virtual Pageable<ReservationSummary> ListByReservationOrder(string reservationOrderId, Datagrain grain, string filter = null, CancellationToken cancellationToken = default)
        {
            if (reservationOrderId == null)
            {
                throw new ArgumentNullException(nameof(reservationOrderId));
            }

            Page<ReservationSummary> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("ReservationsSummariesOperations.ListByReservationOrder");
                scope.Start();
                try
                {
                    var response = RestClient.ListByReservationOrder(reservationOrderId, grain, filter, cancellationToken);
                    return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            Page<ReservationSummary> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("ReservationsSummariesOperations.ListByReservationOrder");
                scope.Start();
                try
                {
                    var response = RestClient.ListByReservationOrderNextPage(nextLink, reservationOrderId, grain, filter, cancellationToken);
                    return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// <summary> Lists the reservations summaries for daily or monthly grain. </summary>
        /// <param name="reservationOrderId"> Order Id of the reservation. </param>
        /// <param name="reservationId"> Id of the reservation. </param>
        /// <param name="grain"> Can be daily or monthly. </param>
        /// <param name="filter"> Required only for daily grain. The properties/UsageDate for start date and end date. The filter supports &apos;le&apos; and  &apos;ge&apos;. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="reservationOrderId"/> or <paramref name="reservationId"/> is null. </exception>
        public virtual AsyncPageable<ReservationSummary> ListByReservationOrderAndReservationAsync(string reservationOrderId, string reservationId, Datagrain grain, string filter = null, CancellationToken cancellationToken = default)
        {
            if (reservationOrderId == null)
            {
                throw new ArgumentNullException(nameof(reservationOrderId));
            }
            if (reservationId == null)
            {
                throw new ArgumentNullException(nameof(reservationId));
            }

            async Task<Page<ReservationSummary>> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("ReservationsSummariesOperations.ListByReservationOrderAndReservation");
                scope.Start();
                try
                {
                    var response = await RestClient.ListByReservationOrderAndReservationAsync(reservationOrderId, reservationId, grain, filter, cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            async Task<Page<ReservationSummary>> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("ReservationsSummariesOperations.ListByReservationOrderAndReservation");
                scope.Start();
                try
                {
                    var response = await RestClient.ListByReservationOrderAndReservationNextPageAsync(nextLink, reservationOrderId, reservationId, grain, filter, cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateAsyncEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// <summary> Lists the reservations summaries for daily or monthly grain. </summary>
        /// <param name="reservationOrderId"> Order Id of the reservation. </param>
        /// <param name="reservationId"> Id of the reservation. </param>
        /// <param name="grain"> Can be daily or monthly. </param>
        /// <param name="filter"> Required only for daily grain. The properties/UsageDate for start date and end date. The filter supports &apos;le&apos; and  &apos;ge&apos;. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="reservationOrderId"/> or <paramref name="reservationId"/> is null. </exception>
        public virtual Pageable<ReservationSummary> ListByReservationOrderAndReservation(string reservationOrderId, string reservationId, Datagrain grain, string filter = null, CancellationToken cancellationToken = default)
        {
            if (reservationOrderId == null)
            {
                throw new ArgumentNullException(nameof(reservationOrderId));
            }
            if (reservationId == null)
            {
                throw new ArgumentNullException(nameof(reservationId));
            }

            Page<ReservationSummary> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("ReservationsSummariesOperations.ListByReservationOrderAndReservation");
                scope.Start();
                try
                {
                    var response = RestClient.ListByReservationOrderAndReservation(reservationOrderId, reservationId, grain, filter, cancellationToken);
                    return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            Page<ReservationSummary> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("ReservationsSummariesOperations.ListByReservationOrderAndReservation");
                scope.Start();
                try
                {
                    var response = RestClient.ListByReservationOrderAndReservationNextPage(nextLink, reservationOrderId, reservationId, grain, filter, cancellationToken);
                    return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// <summary> Lists the reservations summaries for the defined scope daily or monthly grain. </summary>
        /// <param name="scope"> The scope associated with reservations summaries operations. This includes &apos;/providers/Microsoft.Billing/billingAccounts/{billingAccountId}&apos; for BillingAccount scope (legacy), and &apos;/providers/Microsoft.Billing/billingAccounts/{billingAccountId}/billingProfiles/{billingProfileId}&apos; for BillingProfile scope (modern). </param>
        /// <param name="grain"> Can be daily or monthly. </param>
        /// <param name="startDate"> Start date. Only applicable when querying with billing profile. </param>
        /// <param name="endDate"> End date. Only applicable when querying with billing profile. </param>
        /// <param name="filter"> Required only for daily grain. The properties/UsageDate for start date and end date. The filter supports &apos;le&apos; and  &apos;ge&apos;. Not applicable when querying with billing profile. </param>
        /// <param name="reservationId"> Reservation Id GUID. Only valid if reservationOrderId is also provided. Filter to a specific reservation. </param>
        /// <param name="reservationOrderId"> Reservation Order Id GUID. Required if reservationId is provided. Filter to a specific reservation order. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="scope"/> is null. </exception>
        public virtual AsyncPageable<ReservationSummary> ListAsync(string scope, Datagrain grain, string startDate = null, string endDate = null, string filter = null, string reservationId = null, string reservationOrderId = null, CancellationToken cancellationToken = default)
        {
            if (scope == null)
            {
                throw new ArgumentNullException(nameof(scope));
            }

            async Task<Page<ReservationSummary>> FirstPageFunc(int? pageSizeHint)
            {
                using var scope0 = _clientDiagnostics.CreateScope("ReservationsSummariesOperations.List");
                scope0.Start();
                try
                {
                    var response = await RestClient.ListAsync(scope, grain, startDate, endDate, filter, reservationId, reservationOrderId, cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope0.Failed(e);
                    throw;
                }
            }
            async Task<Page<ReservationSummary>> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope0 = _clientDiagnostics.CreateScope("ReservationsSummariesOperations.List");
                scope0.Start();
                try
                {
                    var response = await RestClient.ListNextPageAsync(nextLink, scope, grain, startDate, endDate, filter, reservationId, reservationOrderId, cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope0.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateAsyncEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// <summary> Lists the reservations summaries for the defined scope daily or monthly grain. </summary>
        /// <param name="scope"> The scope associated with reservations summaries operations. This includes &apos;/providers/Microsoft.Billing/billingAccounts/{billingAccountId}&apos; for BillingAccount scope (legacy), and &apos;/providers/Microsoft.Billing/billingAccounts/{billingAccountId}/billingProfiles/{billingProfileId}&apos; for BillingProfile scope (modern). </param>
        /// <param name="grain"> Can be daily or monthly. </param>
        /// <param name="startDate"> Start date. Only applicable when querying with billing profile. </param>
        /// <param name="endDate"> End date. Only applicable when querying with billing profile. </param>
        /// <param name="filter"> Required only for daily grain. The properties/UsageDate for start date and end date. The filter supports &apos;le&apos; and  &apos;ge&apos;. Not applicable when querying with billing profile. </param>
        /// <param name="reservationId"> Reservation Id GUID. Only valid if reservationOrderId is also provided. Filter to a specific reservation. </param>
        /// <param name="reservationOrderId"> Reservation Order Id GUID. Required if reservationId is provided. Filter to a specific reservation order. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="scope"/> is null. </exception>
        public virtual Pageable<ReservationSummary> List(string scope, Datagrain grain, string startDate = null, string endDate = null, string filter = null, string reservationId = null, string reservationOrderId = null, CancellationToken cancellationToken = default)
        {
            if (scope == null)
            {
                throw new ArgumentNullException(nameof(scope));
            }

            Page<ReservationSummary> FirstPageFunc(int? pageSizeHint)
            {
                using var scope0 = _clientDiagnostics.CreateScope("ReservationsSummariesOperations.List");
                scope0.Start();
                try
                {
                    var response = RestClient.List(scope, grain, startDate, endDate, filter, reservationId, reservationOrderId, cancellationToken);
                    return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope0.Failed(e);
                    throw;
                }
            }
            Page<ReservationSummary> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope0 = _clientDiagnostics.CreateScope("ReservationsSummariesOperations.List");
                scope0.Start();
                try
                {
                    var response = RestClient.ListNextPage(nextLink, scope, grain, startDate, endDate, filter, reservationId, reservationOrderId, cancellationToken);
                    return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope0.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateEnumerable(FirstPageFunc, NextPageFunc);
        }
    }
}
