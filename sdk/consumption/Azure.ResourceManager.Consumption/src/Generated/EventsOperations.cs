// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Threading;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Core.Pipeline;
using Azure.ResourceManager.Consumption.Models;

namespace Azure.ResourceManager.Consumption
{
    /// <summary> The Events service client. </summary>
    public partial class EventsOperations
    {
        private readonly ClientDiagnostics _clientDiagnostics;
        private readonly HttpPipeline _pipeline;
        internal EventsRestOperations RestClient { get; }
        /// <summary> Initializes a new instance of EventsOperations for mocking. </summary>
        protected EventsOperations()
        {
        }
        /// <summary> Initializes a new instance of EventsOperations. </summary>
        /// <param name="clientDiagnostics"> The handler for diagnostic messaging in the client. </param>
        /// <param name="pipeline"> The HTTP pipeline for sending and receiving REST requests and responses. </param>
        /// <param name="endpoint"> server parameter. </param>
        /// <param name="apiVersion"> Api Version. </param>
        internal EventsOperations(ClientDiagnostics clientDiagnostics, HttpPipeline pipeline, Uri endpoint = null, string apiVersion = "2019-10-01")
        {
            RestClient = new EventsRestOperations(clientDiagnostics, pipeline, endpoint, apiVersion);
            _clientDiagnostics = clientDiagnostics;
            _pipeline = pipeline;
        }

        /// <summary> Lists the events by billingAccountId and billingProfileId for given start and end date. </summary>
        /// <param name="billingAccountId"> BillingAccount ID. </param>
        /// <param name="billingProfileId"> Azure Billing Profile ID. </param>
        /// <param name="startDate"> Start date. </param>
        /// <param name="endDate"> End date. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="billingAccountId"/>, <paramref name="billingProfileId"/>, <paramref name="startDate"/>, or <paramref name="endDate"/> is null. </exception>
        public virtual AsyncPageable<EventSummary> ListAsync(string billingAccountId, string billingProfileId, string startDate, string endDate, CancellationToken cancellationToken = default)
        {
            if (billingAccountId == null)
            {
                throw new ArgumentNullException(nameof(billingAccountId));
            }
            if (billingProfileId == null)
            {
                throw new ArgumentNullException(nameof(billingProfileId));
            }
            if (startDate == null)
            {
                throw new ArgumentNullException(nameof(startDate));
            }
            if (endDate == null)
            {
                throw new ArgumentNullException(nameof(endDate));
            }

            async Task<Page<EventSummary>> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("EventsOperations.List");
                scope.Start();
                try
                {
                    var response = await RestClient.ListAsync(billingAccountId, billingProfileId, startDate, endDate, cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            async Task<Page<EventSummary>> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("EventsOperations.List");
                scope.Start();
                try
                {
                    var response = await RestClient.ListNextPageAsync(nextLink, billingAccountId, billingProfileId, startDate, endDate, cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateAsyncEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// <summary> Lists the events by billingAccountId and billingProfileId for given start and end date. </summary>
        /// <param name="billingAccountId"> BillingAccount ID. </param>
        /// <param name="billingProfileId"> Azure Billing Profile ID. </param>
        /// <param name="startDate"> Start date. </param>
        /// <param name="endDate"> End date. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="billingAccountId"/>, <paramref name="billingProfileId"/>, <paramref name="startDate"/>, or <paramref name="endDate"/> is null. </exception>
        public virtual Pageable<EventSummary> List(string billingAccountId, string billingProfileId, string startDate, string endDate, CancellationToken cancellationToken = default)
        {
            if (billingAccountId == null)
            {
                throw new ArgumentNullException(nameof(billingAccountId));
            }
            if (billingProfileId == null)
            {
                throw new ArgumentNullException(nameof(billingProfileId));
            }
            if (startDate == null)
            {
                throw new ArgumentNullException(nameof(startDate));
            }
            if (endDate == null)
            {
                throw new ArgumentNullException(nameof(endDate));
            }

            Page<EventSummary> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("EventsOperations.List");
                scope.Start();
                try
                {
                    var response = RestClient.List(billingAccountId, billingProfileId, startDate, endDate, cancellationToken);
                    return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            Page<EventSummary> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("EventsOperations.List");
                scope.Start();
                try
                {
                    var response = RestClient.ListNextPage(nextLink, billingAccountId, billingProfileId, startDate, endDate, cancellationToken);
                    return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateEnumerable(FirstPageFunc, NextPageFunc);
        }
    }
}
