// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Text.Json;
using System.Threading;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Core.Pipeline;
using Azure.ResourceManager.Consumption.Models;

namespace Azure.ResourceManager.Consumption
{
    internal partial class ReservationRecommendationDetailsRestOperations
    {
        private Uri endpoint;
        private string apiVersion;
        private ClientDiagnostics _clientDiagnostics;
        private HttpPipeline _pipeline;

        /// <summary> Initializes a new instance of ReservationRecommendationDetailsRestOperations. </summary>
        /// <param name="clientDiagnostics"> The handler for diagnostic messaging in the client. </param>
        /// <param name="pipeline"> The HTTP pipeline for sending and receiving REST requests and responses. </param>
        /// <param name="endpoint"> server parameter. </param>
        /// <param name="apiVersion"> Api Version. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="apiVersion"/> is null. </exception>
        public ReservationRecommendationDetailsRestOperations(ClientDiagnostics clientDiagnostics, HttpPipeline pipeline, Uri endpoint = null, string apiVersion = "2019-10-01")
        {
            endpoint ??= new Uri("https://management.azure.com");
            if (apiVersion == null)
            {
                throw new ArgumentNullException(nameof(apiVersion));
            }

            this.endpoint = endpoint;
            this.apiVersion = apiVersion;
            _clientDiagnostics = clientDiagnostics;
            _pipeline = pipeline;
        }

        internal HttpMessage CreateGetRequest(string billingScope, Scope scope, string region, Term term, LookBackPeriod lookBackPeriod, string product)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendPath("/", false);
            uri.AppendPath(billingScope, false);
            uri.AppendPath("/providers/Microsoft.Consumption/reservationRecommendationDetails", false);
            uri.AppendQuery("api-version", apiVersion, true);
            uri.AppendQuery("scope", scope.ToString(), true);
            uri.AppendQuery("region", region, true);
            uri.AppendQuery("term", term.ToString(), true);
            uri.AppendQuery("lookBackPeriod", lookBackPeriod.ToString(), true);
            uri.AppendQuery("product", product, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        /// <summary> Details of a reservation recommendation for what-if analysis of reserved instances. </summary>
        /// <param name="billingScope"> The scope associated with reservation recommendation details operations. This includes &apos;/subscriptions/{subscriptionId}/&apos; for subscription scope, &apos;/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}&apos; for resource group scope, /providers/Microsoft.Billing/billingAccounts/{billingAccountId}&apos; for BillingAccount scope, and &apos;/providers/Microsoft.Billing/billingAccounts/{billingAccountId}/billingProfiles/{billingProfileId}&apos; for billingProfile scope. </param>
        /// <param name="scope"> Scope of the reservation. </param>
        /// <param name="region"> Used to select the region the recommendation should be generated for. </param>
        /// <param name="term"> Specify length of reservation recommendation term. </param>
        /// <param name="lookBackPeriod"> Filter the time period on which reservation recommendation results are based. </param>
        /// <param name="product"> Filter the products for which reservation recommendation results are generated. Examples: Standard_DS1_v2 (for VM), Premium_SSD_Managed_Disks_P30 (for Managed Disks). </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="billingScope"/>, <paramref name="region"/>, or <paramref name="product"/> is null. </exception>
        public async Task<Response<ReservationRecommendationDetailsModel>> GetAsync(string billingScope, Scope scope, string region, Term term, LookBackPeriod lookBackPeriod, string product, CancellationToken cancellationToken = default)
        {
            if (billingScope == null)
            {
                throw new ArgumentNullException(nameof(billingScope));
            }
            if (region == null)
            {
                throw new ArgumentNullException(nameof(region));
            }
            if (product == null)
            {
                throw new ArgumentNullException(nameof(product));
            }

            using var message = CreateGetRequest(billingScope, scope, region, term, lookBackPeriod, product);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        ReservationRecommendationDetailsModel value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = ReservationRecommendationDetailsModel.DeserializeReservationRecommendationDetailsModel(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                case 204:
                    return Response.FromValue<ReservationRecommendationDetailsModel>(null, message.Response);
                default:
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Details of a reservation recommendation for what-if analysis of reserved instances. </summary>
        /// <param name="billingScope"> The scope associated with reservation recommendation details operations. This includes &apos;/subscriptions/{subscriptionId}/&apos; for subscription scope, &apos;/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}&apos; for resource group scope, /providers/Microsoft.Billing/billingAccounts/{billingAccountId}&apos; for BillingAccount scope, and &apos;/providers/Microsoft.Billing/billingAccounts/{billingAccountId}/billingProfiles/{billingProfileId}&apos; for billingProfile scope. </param>
        /// <param name="scope"> Scope of the reservation. </param>
        /// <param name="region"> Used to select the region the recommendation should be generated for. </param>
        /// <param name="term"> Specify length of reservation recommendation term. </param>
        /// <param name="lookBackPeriod"> Filter the time period on which reservation recommendation results are based. </param>
        /// <param name="product"> Filter the products for which reservation recommendation results are generated. Examples: Standard_DS1_v2 (for VM), Premium_SSD_Managed_Disks_P30 (for Managed Disks). </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="billingScope"/>, <paramref name="region"/>, or <paramref name="product"/> is null. </exception>
        public Response<ReservationRecommendationDetailsModel> Get(string billingScope, Scope scope, string region, Term term, LookBackPeriod lookBackPeriod, string product, CancellationToken cancellationToken = default)
        {
            if (billingScope == null)
            {
                throw new ArgumentNullException(nameof(billingScope));
            }
            if (region == null)
            {
                throw new ArgumentNullException(nameof(region));
            }
            if (product == null)
            {
                throw new ArgumentNullException(nameof(product));
            }

            using var message = CreateGetRequest(billingScope, scope, region, term, lookBackPeriod, product);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        ReservationRecommendationDetailsModel value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = ReservationRecommendationDetailsModel.DeserializeReservationRecommendationDetailsModel(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                case 204:
                    return Response.FromValue<ReservationRecommendationDetailsModel>(null, message.Response);
                default:
                    throw _clientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }
    }
}
